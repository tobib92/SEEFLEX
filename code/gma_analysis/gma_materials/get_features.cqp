##############################################################
##  CQP-based feature extraction for multivariate analysis  ##
##############################################################

##### INSTRUCTIONS #####

## Feature extraction is performed by a CQP script based on this template, which
## can be adapted to the corpus, tagset and desired selection of features.
## The working directory must also contain the files "featex.m" and "featex.perl".

## Invoke the script as follows on the command line:
##   cqp -c -f get_features.cqp | perl featex.perl example.tsv

## Within the script, you can execute arbitrary CQP commands to generate named query
## results (NQR) corresponding to (instances of) the desired features. For example,
## you might generate an NQR Passive containing instances of passive constructions.
## Features are passed on to the Perl script with the macro
##
##   /feature[Passive, "passive"];
##
## specifying the query result name and the name to be used in the feature matrix.
## Future versions of the Perl script will collect the individual tokens of each
## feature declared in this way.  If only per-text frequency counts are required
## (e.g. for token counts or noun/verb counts), you can use the macro
##
##   /feature_count[Passive, "passive"];
##
## instead, which is also more efficient.  Note that the first feature in the
## resulting matrix contains the number of tokens in each text; it is named 
## "n_token" and is generated automatically by this script.
##
## It is important that your CQP script does not produce _any_ output except
## through the two macros above!


##### CONFIGURATION #####

## Activate the desired corpus:
## !!! CQP must be invoked with "-D CORPUS" !!!


## Specify the name of the s-attribute containing text IDs:
define macro text_id(0) "text_id";


##### SETUP -- Do not change anything in this block! #####
set PrettyPrint off;
set ProgressBar off;
set Timing off;

define macro < "featex.m";


##### INITIALIZE FEATURE EXTRACTION #####

## Option A: extraction from full corpus
##  - target corpus must already be activated (see above)
# /init_corpus[];

## Option B: extraction from subcorpus
##  - create subcorpus with name of your choice, expanded to suitable units
##  - then initialize with subcorpus name (will automatically be activated)
RealCorpus = <s_include = "in"> [] expand to s;
/init_subcorpus[RealCorpus];


##### FEATURE SPECIFICATIONS #####

## 1) General counts

## token count is automatically included as feature "n_token"

## sentence count
Sent = <s> []+ </s>;
/feature_count[Sent, "n_sent"];

## count actual words (excluding punctuation)
Words = [pos = "[A-Z].*"]; # NB: this is very expensive for large corpora
/feature_count[Words, "n_word"];

## lexical density 
LD = [pos="N.*|J.*|V.*"];
/feature_count[LD, "ld"];


## 2) POS frequencies

## common nouns
NN = [pos="NN.*"];
/feature_count[NN, "nn"];

## proper nouns
NP = [pos = "NP.*"];
/feature_count[NP, "np"];

## nominalisations
Nom1 = [pos = "NN.*" & word = ".{3}(it(y|ies)|ness(es)?|ism(s)?)"]; 
Nom2 = [pos = "NN.*" & word = ".{4}.*(tion(s)?|it(y|ies)|ness(es)?|ism(s)?|ment(s)?)" & word!=".*question|.*questions|function|functions|charities|charity|.biscuity" %cd];
/union[Nom, Nom1, Nom2]; 
/feature[Nom, "nom"];

## neo-classical compounds
define $NonNeo < "wordlists/EnonNeo.txt"; 
NeoPre = [word="anti.*|auto.*|bio.*|dia.*|endo.*|extra.{4,}|geo.*|haemo.*|hetero.*|homo.*|hyper.*|hypo.*|inter.*|intra.*|macro.*|mega.*|micro.*|mono.*|nano.*|neo.*|neuro.*|non.*|photo.*|poly.*|psy.*|semi.*|stereo.+|super.*|tech.*|tele.*|theo(l|c|p).*|tri.*|ultra.*" %cd & word!=RE($NonNeo) %cd];
NeoSuff = [word=".*graph.*|.*olog.*|.*gram.*|.*meter.*|.*onom.*|.*tronic.*" %cd & word!="cologne.*|apolog.*|grampian|ingram|grammy|technologie|tarifautonomie|cemeter.*" %cd];
/union[Neo, NeoPre, NeoSuff]; 
/feature[Neo, "neo"];

## all possessive pronouns
P4 = [pos="APPGE"];
/feature_count[P4, "poss"];

## all pronouns (including interrogative pronouns etc.)
Pron = [pos="P.*" & pos!="P.*(2|3|4)(2|3|4)(@|%)?"];

Pronoun = union P4 Pron;
/feature_count[Pronoun, "pronoun"];

## personal pronouns by person
P1 = [pos = "PPI.*"];
/feature_count[P1, "p1"];

P2 = [pos = "PPY.*"];
/feature_count[P2, "p2"];

P3 = [pos = "PPH.*"];
/feature_count[P3, "p3"];

Pit = [word="it|It"];
/feature_count[Pit, "pit"];

## all pronouns by person
App1=[pos="APPGE" & word="our|my" %cd];
Pron1=union P1 App1;
/feature_count[Pron1, "pospers1"];

App2=[pos="APPGE" & word="your" %cd];
Pron2=union P2 App2;
/feature_count[Pron2, "pospers2"];

App3=[pos="APPGE" & word="its|their|his|her" %cd];
Pron3 = union P3 App3;
/feature_count[Pron3, "pospers3"];

## all adjectives
Adj= [pos = "J.*" & pos != "J.*(2|3|4)(2|3|4)(@|%)?"];
/feature_count[Adj, "adj"];

## attributive adjectives
AtAdj = @[pos="J.*"] [pos="N.*"] within s;
set AtAdj matchend target; 
/feature[AtAdj, "atadj"]; 

## prepositions
Prep = [pos = "I.*" & pos !=  "I.*(2|3|4)(2|3|4)(@|%)?"];
/feature_count[Prep, "prep"];

## finite verbs
Fin = [pos="V.*" & pos!="V.(G|I|N).*" & pos!="V.*(2|3|4)(2|3|4)(@|%)?"];
/feature_count[Fin, "fin"];

## past tense verbs
Past = ([pos="V.D.*" & pos!="V.*(2|3|4)(2|3|4)(@|%)?"] | [word="used"%c & pos="VMK.*"]);
/feature_count[Past, "past"];

## will as indicator of future
Will = [pos="V.*" & word="won|will|\'ll|shall" %cd] [pos != "V.*|\,|\-"]{0,2} [pos = "V.*I.*"] within s;
set Will match matchend;
/feature[Will, "will"];

## modal verbs
VM = [pos="VM(K)?.*" & pos!="VM.*(2|3|4)(2|3|4)(@|%)?" & word!="will|\'ll|shall"%c]; 
/feature_count[VM, "vm"];

## all verbs
V = [pos="V.*" & pos!="V.*(2|3|4)(2|3|4)(@|%)?"];
/feature_count[V, "v"];


## 3) Grammatical structures

## to-infinitives
Inf = [pos = "TO"] [pos != "V.*"]? [pos="V.I"] within s;
set Inf match matchend;
/feature[Inf, "inf"];

## passive
Pass = ([pos="VB(M|R|Z|D).*"] | [pos="VM.*"][pos="TO.*"][pos="VBI.*"]) [word!="very|strongly|deeply|too|extremely|quite|rather|firmly|greatly|more|," & pos!="JJ.*|AT.*|N.*|PN.*|DD.*|VHZ"]{0,2} [pos="V.N.*" & pos!="VVNK.*" & word!="compared"] within s;
set Pass match matchend;
/feature[Pass, "pass"];

## coordinating conjunctions
Coord = [pos="CC.*" & pos!="CC.*(2|3|4)(2|3|4)(@|%)?"];
/feature_count[Coord, "coord"];

## subordinating conjunctions
Sub = [pos="CS.*" & pos!="CS.*(2|3|4)(2|3|4)(@|%)?"];
/feature[Sub, "subord"];

## interrogatives
Q = @[word="\?"] within s;
set Q matchend target;
YNcompl = <s>[word="\"|\'"]? [pos="CC.*" & word!="nor" %c]? [pos="VM.*|VD.*|VB.*|VH.*"][pos="PP.*|N.*|AT.*"] []*[word="\?"];
set YNcompl match matchend;
WhQ = <s>[word="\"|\'"]? [pos="CC.*"]? @[pos=".*Q.*"] [pos="V.*"] [pos!="R.*"] within s;
set WhQ matchend target;
set WhQ match target;
/union[Interr, Q, WhQ, YNcompl]; 
/feature[Interr, "interr"];

## imperatives
define $NonImp < "wordlists/EnonImp.txt"; 
Imper1 = <s>@[pos="V.0.*" & word!= RE($NonImp) %c] [pos!="V.Z.*|VM.*"] []* [word!="\?"]</s>;
set Imper1 matchend target; 

Imper2 = <s>[word="\"|\'"] @[pos="V.0" & word!= RE($NonImp) %c] [pos!="V.Z.*|VM.*"] []* [word!="\?"]</s>;
set Imper2 matchend target; 
set Imper2 match target;

Imper3 = <s>[pos="R.*|CC" & word!="how|wh.*" %cd] @[pos="V.0" & word!= RE($NonImp) %c] [pos!="V.Z.*|VM"] []* [word!="\?"]</s>;
set Imper3 matchend target; 
set Imper3 match target;

/union[Imp, Imper1, Imper2, Imper3];
/feature[Imp, "imper"];

## titles 
Title1 = @[pos="NNB"][pos="NP.*"] within s;
set Title1 matchend target;
define $Title < "wordlists/ETitles.txt";
Title2 = @[word= RE($Title) %cd] [pos="NP.*"] within s;
set Title2 matchend target;
Title3 = @[pos="NNB"][word="Person.*" & pos="FO"] within s;
set Title3 matchend target;
/union[Title, Title1, Title2, Title3];
/feature[Title, "title"];

## salutations and greetings
Sal1 = "Your" [word="royal" %cd]? [word="Majest.*|Highness.*|Excellenc.*"] within s;
set Sal1 match matchend;
Sal2 = "Excellencies";
Sal3 = [word="dear|welcome|greetings|hello|hey|hi" %cd] [pos="N.*" & word!="god|dear|it|to" %cd] within s;
set Sal3 match matchend;
Sal4 = "ladies"%cd "and" "gentlemen|gentleman"%cd within s;
Sal5 = [pos!="N.*|\,|\.|\)|I.*|VVG"][word="royal" %cd]? [word="Majest.*|Highness.*|Excellenc.*"] within s;
set Sal5 match matchend;
/union[Salut, Sal1, Sal2, Sal3, Sal4, Sal5];
# /feature[Salut, "salut"];

Greet = <s> [word="Best|Kind|Yours|Sincerely|xoxo|Faithfully|Goodbye|"] [word!="of|practice|standard|British|is|mail"] within s;
# /feature[Greet, "greet"];

/union[SalutGreet, Salut, Greet];
/feature[SalutGreet, "salutgreet"];

## adverbs of time and space
RL = [word!="look|looking|looked|looks" %cd][pos="RL.*"  & pos!= "RL.*(2|3|4)(2|3|4)(@|%)?" & word!=".*together|downstream" %cd] within s;
set RL match matchend;
/feature[RL, "rl"];

RT = [pos="RT.*" & pos!= "RT.*(2|3|4)(2|3|4)(@|%)?"];
/feature_count[RT, "rt"];


## 4) First element in sentence

## nominal elements (potential subjects)
NPTheme = <s>[word="\"|\'"]? @[pos="A.*|J.*|N.*|P.*|D.*|EX" & pos!=".*Q.*"] within s;
set NPTheme match matchend;
/feature[NPTheme, "nptheme"];

## numbers
NumberTheme = <s> [word="\"|\'"]? @[pos="M.*"] within s;
set NumberTheme match matchend;
/feature[NumberTheme, "numbertheme"];

## prepositional phrases
PPTheme = <s>[word="\"|\'"]? @[pos="I.*" & word!="about"%cd] within s;
set PPTheme match matchend;
/feature[PPTheme, "pptheme"];

## adverb as first element; could be either a circumstance, a stance adverbial or a conjunct
AdvTheme = <s> [word="\"|\'"]? @[pos="R.*" & pos!="R.*Q.*" & word!="please" %cd] within s;
set AdvTheme match matchend;
/feature[AdvTheme, "advtheme"];

## Conjunctions as textual elements
CCTheme = <s> [word="\"|\'"]? @[pos="CC.*"] within s;
set CCTheme match matchend;
/feature[CCTheme, "cctheme"];

## wh-elements 
WhTheme = <s> [word="\"|\'"]? @[pos=".*Q.*" & word != "however" %cd] within s;
set WhTheme match matchend;
/feature[WhTheme, "whtheme"];

## discourse markers as first element
UhTheme = <s> [word="\"|\'"]? @[pos="UH" & word!="Gee|MUMM|OO-MMM|TT|EUREKA"] within s;
Please = <s> [word="\"|\'"]? @[word="please" %cd] within s;
/union[DiscTheme, UhTheme, Please];
set DiscTheme match matchend;
/feature[DiscTheme, "disctheme"];

## nonfinitive clause as first element
ToTheme = <s> [word="\"|\'"]? @[pos="TO.*|V.I.*|V.*G.*|V.*D.*|V.*N.*"] within s;
set ToTheme match matchend;
/feature[ToTheme, "totheme"];

## subordinate clauses as first element (would also count as adverbial)
CSTheme = <s> [word="\"|\'"]? @[pos="CS.*" & word!="that"%cd] within s;
# additional occurrences of "when" tagged as R.*
set CSTheme match matchend;
/feature[CSTheme, "cstheme"];

## merge with infinitive clauses
/union[SubordTheme, ToTheme, CSTheme];
/feature[SubordTheme, "subordtheme"];

## verbal elements (potentially interpersonal elements)
define $NonVerbTh < "wordlists/EnonVerbTh.txt";
VerbTheme = <s> [word="\"|\'"]? @[pos="V.*" & pos!="V.*I.*|V.*D.*|V.*G.*|V.*N.*" & word!= RE($NonVerbTh) %cd] within s;
set VerbTheme match matchend;
/feature[VerbTheme, "verbtheme"];

exit;